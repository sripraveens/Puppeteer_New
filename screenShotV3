const puppeteerExtra = require("puppeteer-extra");
const StealthPlugin = require("puppeteer-extra-plugin-stealth");
const chromium = require("@sparticuz/chromium");
const AWS = require("aws-sdk");

AWS.config.update({ region: "ap-southeast-1" });
const s3 = new AWS.S3();

puppeteerExtra.use(StealthPlugin());

function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

async function initializeBrowser() {
  let browser = null;
  if (!browser || !browser.isConnected()) {
    console.time("Browser Launch Time");
    browser = await puppeteerExtra.launch({
      args: chromium.args,
      defaultViewport: chromium.defaultViewport,
      executablePath: await chromium.executablePath(),
      headless: chromium.headless,
      ignoreHTTPSErrors: true,
    });
    console.timeEnd("Browser Launch Time");
  }
  return browser;
}

async function scrape(url) {
  console.log("URL", url);
  let result = null;
  let link = null;

  try {
    console.time("Browser Initialization");
    const browser = await initializeBrowser();
    console.timeEnd("Browser Initialization");

    console.time("Page Creation");
    const page = await browser.newPage();
    console.timeEnd("Page Creation");

    console.time("View Port");
    await page.setViewport({
      width: 1920,
      height: 1080,
      deviceScaleFactor: 2,
    });
    console.timeEnd("View Port");

    console.time("Page Navigation");
    await page.goto(url, { waitUntil: "networkidle2" });
    console.timeEnd("Page Navigation");

    // üéØ Wait for heatmap % labels to confirm visual readiness
    const iframeElement = await page.$("#tv_heatmap_container iframe");
    const iframe = await iframeElement.contentFrame();
    await iframe.waitForSelector('span[class^="svgTextWrap-"]', {
      timeout: 7000,
    });
    await sleep(1000);
    console.log("‚úÖ Heatmap labels detected, proceeding to screenshot...");

    console.time("Screenshot Capture");
    const buffer = await page.screenshot();
    console.timeEnd("Screenshot Capture");

    console.time("S3 Upload");
    const params = {
      Bucket: process.env.S3BUCKET,
      Key: `${Date.now()}.png`,
      Body: buffer,
      ContentType: "image/png",
      ACL: "public-read",
    };
    result = await s3.putObject(params).promise();
    link = `${process.env.S3URL}${params.Key}`;
    console.timeEnd("S3 Upload");

    console.log("‚úÖ Screenshot URL:", link);

    console.time("Page Close");
    const pages = await browser.pages();
    for (const p of pages) {
      await p.close();
    }
    console.timeEnd("Page Close");

    return link;
  } catch (error) {
    console.error("‚ùå Error during scraping:", error);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: "Internal Server Error" }),
    };
  }
}

exports.handler = async (event) => {
  try {
    console.log("üì¶ Event received:", event);
    const body = event.body ? JSON.parse(event.body) : {};
    const { url } = body;

    if (!url) {
      return {
        statusCode: 400,
        body: JSON.stringify({ error: "Missing URL" }),
      };
    }

    console.time("Total Scrape Time");
    const data = await scrape(url);
    console.timeEnd("Total Scrape Time");

    return {
      statusCode: 200,
      body: JSON.stringify({ data }),
    };
  } catch (error) {
    console.error("‚ùå Handler Error:", error);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: "Internal Server Error" }),
    };
  }
};
